
For Capability based stuff (purse Example)

 create(...) -> Entry[Purse[T]] + ManagerCap
 createCap(ManagerCap) => WithdrawCap | DepositCap

 Purse(t:T)
 Cap(id:Id.Public)

 check is: derivePublicId(purse entry id) == cap id
 What is allowed to do is defined by the static type of the cap

In token have:
 Zero -> everybody can gen a 0 value instance of a token


//Basic Functionality
Purse with
 Manager -- can generate the other Caps -- can extract purse from entry (allows to nest differently)
 Withdraw -- allows to withdraw
 Deposit -- allows to deposit

//Sharing a Cap
// To make a public purse:
//  derive DepositCap from MasterCap
//  share MasterCap over publish module

//Simplified version
// Entry[PublicPurse]
// PublicPurse(Cap)

//Extended Caps
affine AllowanceCap(WithdrawCap, amount)
//Can we make compatible with different Purses?? <-- holy grail


Alla:
 guarded[C] Cap[phantom T, phantom C](id:Id.Public, state:C)
 then stuff takes: Example Withdraw
  Entry[Purse[T]] + Cap[Purse[T],Withdraw]

 Cap has:
  checkAccess[T,C](entr:Entry[T], cap:Cap[T,C]):Bool    //<- Preferable
  enforceAccess(entr:Entry[T], cap:Cap[T,C]):()         //transactional

 //Can we have a model where we can Restrict Caps
 //alla: Cap[..,Nested[Allowance,Withdraw]] //Generation requires Withdraw, guarded Allowance can get Cap[..., Withdraw]
 // With: type Allowance = Nested[AllowanceMarker, Withdraw] it is easy to manage
