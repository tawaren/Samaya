import std.Token._
import std.Purse._
import std.Publish.share
import std.Publish.get
import std.Publish.Public
import std.Subject._
import std.SubjectLock._
import std.Capability._
import std.core.sys.Sys._
import std.core.IntU128.U128
import FixToken._

transactional transaction CreateFixPurse(owner:Subject, context consume gen:IdGenerator):(
        purse:PurseEntry[Token[Fix]],
        master:Entry[Locked[WithdrawCap[Token[Fix]]]],
        deposit:Public[DepositCap[Token[Fix]]]
    ) {
  let (purse, cap, gen) = createPurse(zero(),gen) in
  let (withdrawCapLoc, gen) = uniqueID(gen) in
  let (depositCapLoc, _) = uniqueID(gen) in
  let lockedWithdraw = lockEntry(owner,withdrawCapLoc, createWithdrawCap(cap)) in
  let sharedDeposit = share(depositCapLoc, createDepositCap(cap)) in
  (purse, lockedWithdraw, sharedDeposit)
}

transactional transaction FixPurseDeposit(
        consume tokens:Token[Fix],
        consume to:PurseEntry[Token[Fix]],
        depositCap:Public[DepositCap[Token[Fix]]]
    ): (to:PurseEntry[Token[Fix]]) {
  let depositCap = get(depositCap) in
  let toHandle = createHandle(to, toPerm(depositCap)) in
  deposit(toHandle, tokens).entry
}

transactional transaction FixPurseWithdraw(
        consume from:PurseEntry[Token[Fix]],
        withdrawCap:Entry[Locked[WithdrawCap[Token[Fix]]]],
        auth:Authorization,
        amount:U128
  ):(from:PurseEntry[Token[Fix]], tokens:Token[Fix]) {
  let (_, _, withdrawCap) = unlockEntry(withdrawCap, auth) in
  let fromHandle = createHandle(from, toPerm(withdrawCap)) in
  let (fromHandle, tokens) = withdraw(fromHandle, amount) in
  (fromHandle.entry, tokens)
}
