import std.Asset._
import std.Asset.mint as assetMint
import std.Option._
import std.Subject._
import std.core.sys.Ids.idFromData
import std.EdDsaAuthenticator._
import std.core.sys.EdDsa
import std.core.sys.Sys._
import std.core.Data20.Data20
import std.SubjectLock._
import std.core.Equal._
import std.core.Id
import std.core.Id._

module MandalaKitten {
    //Data Type for Our Asset
    local data Kitten(dna:Data20)

    global function authoritySubject() = Subject#(idFromData(0xdf797acae07febf43fef6585f87c0529a9580330))

    global transactional function mintKitten(dna:Data20, auth:Authorization, implicit context consume gen:IdGenerator):(Asset[Kitten],IdGenerator) {
        ensure checkAuthorization(authoritySubject(),auth) in assetMint(Kitten#(dna))
    }
}

import MandalaKitten._

transactional transaction MintKitten(dna:Data20, to:Subject, auth:Authorization, context consume gen:IdGenerator):(asset:Entry[Locked[Asset[Kitten]]]) {
    let (newAsset, newGen) = mintKitten(dna, auth) in
    let (storageLoc, _) = uniqueID(newGen) in
    lockEntry(to,storageLoc,newAsset)
}


transactional transaction TransferKitten(consume kittenEntry:Entry[Locked[Asset[Kitten]]],  auth:Authorization, to:Subject, context consume gen:IdGenerator):
                                  (kittenSent:Entry[Locked[Asset[Kitten]]]) {
  let (senderLoc, from, kitten) = unlockEntry(kittenEntry, auth) in
  let (receiverLoc, _) = uniqueID(gen) in
  lockEntry(to,receiverLoc,kitten)
}
