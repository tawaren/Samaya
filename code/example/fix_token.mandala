import std.Token._
import std.Option._
import std.Subject._
import std.EdDsaAuthenticator._
import std.core.sys.EdDsa
import std.core.sys.Sys._
import std.core.sys.Ids.idFromData
import std.core.sys.Ids.privateModuleIdDerive
import std.core.sys.Ids.moduleId

import std.core.IntU128.U128
import std.core.Hash.hash
import std.core.IntU8
import std.SubjectLock._
import std.core.Equal._
import std.core.Id._

module FixToken {
    //Marker type for our token
    local data Fix
    local linear data Inited()

    //Replace with a Subject for which you have the needed Authentication Material
    global function initialOwner() = Subject#(idFromData(0xbf124d79a46c3761412995bcc3359045bf21870b))
    global function totalSupply():U128 = 10000

    global transactional function init(consume gen:IdGenerator):(Entry[Locked[Token[Fix]]], Entry[Inited]) {
        let (storageLoc, _) = uniqueID(gen) in
        let newTokens = mint[Fix](totalSupply()) in
        let ownedTokens = lockEntry(initialOwner(),storageLoc,newTokens) in
        let initOnceId = privateModuleIdDerive(moduleId(), hash(0:U128)) in
        let initOnceEntry = Entry#(initOnceId, Inited#()) in
        (ownedTokens, initOnceEntry)
    }
}

import FixToken._

transactional transaction InitFix(consume gen:IdGenerator):(coins:Entry[Locked[Token[Fix]]], blocker:Entry[Inited]) {
    init(gen)
}

transactional transaction TransferFix(consume coins:Entry[Locked[Token[Fix]]], auth:Authorization, amount:U128, to:Subject, context consume gen:IdGenerator):
                                  (coinsChange:Entry[Locked[Token[Fix]]], coinsSent:Entry[Locked[Token[Fix]]]) {
  let (senderLoc, from, allTokens) = unlockEntry(coins, auth) in
  let (receiverLoc, _) = uniqueID(gen) in
  let (rem,send) = split(allTokens, amount) in
  let changeEntry = lockEntry(from,senderLoc,rem) in
  let receiverEntry = lockEntry(to,receiverLoc,send) in
  (changeEntry, receiverEntry)
}

transactional transaction JoinFix(consume coinsA:Entry[Locked[Token[Fix]]], consume coinsB:Entry[Locked[Token[Fix]]], auth:Authorization):
                                  (coins:Entry[Locked[Token[Fix]]]) {
  let (loc, from, tokensA) = unlockEntry(coinsA, auth) in
  let (_, _, tokensB) = unlockEntry(coinsB, auth) in
  let allTokens = merge(tokensA, tokensB) in
  lockEntry(from,loc,allTokens)
}

transactional transaction UnlockFix(
    consume coins:Entry[Locked[Token[Fix]]],
    auth:Authorization
):(tokens:Token[Fix]) {
  let (_, _, tokens) = unlockEntry(coins, auth) in
  tokens
}
