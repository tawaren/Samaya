import std.Token._
import std.Option._
import std.Subject._
import std.EdDsaAuthenticator._
import std.core.sys.EdDsa
import std.core.sys.Sys._
import std.core.sys.Ids.idFromData
import std.core.sys.Ids.privateModuleIdDerive
import std.core.sys.Ids.moduleId

import std.core.IntU128.U128
import std.core.Hash.hash
import std.core.IntU8
import std.SubjectLock._
import std.core.Equal._
import std.core.Id._

module FixToken {
    //Marker type for our token
    local data Fix
    local linear data Inited()

    //Replace with a Subject for which you have the needed Authentication Material
    global function initialOwner() = Subject#(idFromData(0xfe101df1f61a2facede83909190cffd71ab18e61))
    global function totalSupply():U128 = 10000

    global transactional function init(consume gen:IdGenerator):(Entry[Locked[Token[Fix]]], Entry[Inited]) {
        let (storageLoc, _) = uniqueID(gen) in
        let newTokens = mint[Fix](totalSupply()) in
        let ownedTokens = lockEntry(initialOwner(),storageLoc,newTokens) in
        let initOnceId = privateModuleIdDerive(moduleId(), hash(0:U128)) in
        let initOnceEntry = Entry#(initOnceId, Inited#()) in
        (ownedTokens, initOnceEntry)
    }
}