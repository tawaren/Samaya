import std.Token._
import std.Token.mint as tokenMint
import std.Option._
import std.Subject._
import std.EdDsaAuthenticator._
import std.core.sys.EdDsa
import std.core.sys.Sys._
import std.core.sys.Ids.idFromData

import std.core.IntU128.U128
import std.core.IntU8
import std.SubjectLock._
import std.core.Equal._
import std.core.Id._

module FHNWToken {
    //Marker type for our token
    local data FHNW

    //Replace with a Subject for which you have the needed Authentication Material
    global function ownerSubject() = Subject#(idFromData(0xbf124d79a46c3761412995bcc3359045bf21870b))

    global transactional function mintFHNW(amount:U128, auth:Authorization):Token[FHNW] {
        ensure checkAuthorization(ownerSubject(), auth) in tokenMint[FHNW](amount)
    }

}

transactional transaction MintFHNW(amount:U128, auth:Authorization, context consume gen:IdGenerator):(coins:Entry[Locked[Token[FHNWToken.FHNW]]]) {
    let (storageLoc, _) = uniqueID(gen) in
    let newTokens = FHNWToken.mintFHNW(amount, auth) in
    lockEntry(FHNWToken.ownerSubject(),storageLoc,newTokens)
}

transactional transaction TransferFHNW(consume coins:Entry[Locked[Token[FHNWToken.FHNW]]], auth:Authorization, amount:U128, to:Subject, context consume gen:IdGenerator):
                                  (coinsChange:Entry[Locked[Token[FHNWToken.FHNW]]], coinsSent:Entry[Locked[Token[FHNWToken.FHNW]]]) {
  let (senderLoc, from, allTokens) = unlockEntry(coins, auth) in
  let (receiverLoc, _) = uniqueID(gen) in
  let (rem,send) = split(allTokens, amount) in
  let changeEntry = lockEntry(from,senderLoc,rem) in
  let receiverEntry = lockEntry(to,receiverLoc,send) in
  (changeEntry, receiverEntry)
}

transactional transaction JoinFHNW(consume coinsA:Entry[Locked[Token[FHNWToken.FHNW]]], consume coinsB:Entry[Locked[Token[FHNWToken.FHNW]]], auth:Authorization, context consume gen:IdGenerator):
                                  (coins:Entry[Locked[Token[FHNWToken.FHNW]]]) {
  let (_, fromA, tokensA) = unlockEntry(coinsA, auth) in
  let (_, fromB, tokensB) = unlockEntry(coinsB, auth) in
  ensure fromA == fromB in
  let (receiverLoc, _) = uniqueID(gen) in
  let (allTokens) = merge(tokensA, tokensB) in
  lockEntry(fromA,receiverLoc,allTokens)
}
