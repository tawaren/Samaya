import std.Asset._
import std.Asset.mint as assetMint
import std.Option._
import std.Subject._
import std.EdDsaAuthenticator._
import std.core.sys.EdDsa
import std.core.sys.Sys._
import std.core.Data20.Data20
import std.SubjectLock._
import std.core.Equal._
import std.core.Id
import std.core.Id._

//Todo: do we even need the Asset Wrapper Class??
//      if we keep it we should move the id there
module MandalaKitten {
    //Data Type for Our Asset
    local data Kitten(dna:Data20)

    //Note: 0x0000000000000000000000000000000000000000000000000000000000000000 is a placeholder
    //Replace 0x00..00 with a Pk where you have access to the corresponding SK
    global function ownerPk() = 0xdf797acae07febf43fef6585f87c0529a9580330a8c97b621a0fcc7a4968558b:EdDsa.Pk
    global function ownerSubject() = subjectFor(ownerPk()).subject

    global transactional function mintKitten(dna:Data20, auth:Authorization, implicit context consume gen:IdGenerator):(Asset[Kitten],IdGenerator) {
        ensure checkAuthorization(ownerSubject(),auth) in assetMint(Kitten#(dna))
    }

    global function safeMintKitten(dna:Data20, auth:Authorization, implicit context consume gen:IdGenerator):(Option[Asset[Kitten]],IdGenerator) {
        try mintKitten(dna,auth,$gen) with
         | success(ass, newCtx) => (Option#Some(ass),newCtx)
         | failure(oldCtx) => (Option#None,oldCtx)
    }
}


transactional transaction MintKitten(dna:Data20, to:Subject, auth:Authorization, context consume gen:IdGenerator):(coins:Entry[Locked[Asset[MandalaKitten.Kitten]]]) {
    let (newAsset, newGen) = MandalaKitten.mintKitten(dna, auth) in
    let (storageLoc, _) = uniqueID(newGen) in
    lockEntry(to,storageLoc,newAsset)
}


transactional transaction TransferKitten(consume kittenEntry:Entry[Locked[Asset[MandalaKitten.Kitten]]],  auth:Authorization, to:Subject, context consume gen:IdGenerator):
                                  (kittenSent:Entry[Locked[Asset[MandalaKitten.Kitten]]]) {
  let (senderLoc, from, kitten) = unlockEntry(kittenEntry, auth) in
  let (receiverLoc, newGen) = uniqueID(gen) in
  lockEntry(to,receiverLoc,kitten)
}
