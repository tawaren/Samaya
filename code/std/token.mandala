import core.IntU128.U128
import core.IntU128._
import core.Arith._
import core.Compare._
import core.Equal._
import core.Equal

//This fails due to Can not parse unknown enum variant
//  Either we generate wrongly or miss something on Mandala side
module Token {
   global(inspect) local(create, consume) linear data Token[phantom T](amount:U128)

   guarded[T] function mint[T](amount:U128):(res:Token[T]) = Token#(amount)
   global function zero[T]():(res:Token[T]) = Token#(0)
   guarded[T] function burn[T](consume tok1:Token[T]) = let Token(amount) = tok1 in ()

   global transactional function split[T](consume tok:Token[T], split:U128):(reminder:Token[T], extracted:Token[T]){
        ensure tok.amount >= split in
        (Token#(tok.amount - split), Token#(split))
   }

   global transactional function merge[T](consume tok1:Token[T], consume tok2:Token[T]):(res:Token[T]) {
        Token#(tok1.amount + tok2.amount)
   }

   global function amount[T](Token[T](amount)) = amount

   instance FungibleForToken[T] for Fungible[Token[T]]{
        implement split with split[T]
        implement merge with merge[T]
        implement amount with amount[T]
   }

   global function tokenEq[T](tok1:Token[T], tok2:Token[T]) = tok1.amount == tok2.amount

   instance EqForToken[T] for Equal[Token[T]]{
        implement eq with tokenEq[T]
   }

}
