import core.Bool.Bool
import core.Data20.Data20
import core.Equal

//Todo: Shall we have a default trait??
//      Also numerics and bool can default to 0/false
module Either {
    global primitive data Either[L,R]{
        Left(left:L)
        Right(right:R)
    }

    //Todo: _ does not work, should it??? alla Left(_)
    global function isLeft[L,R](op1:Either[L,R]):Bool{
         inspect op1 with
             | Left(_) => Bool#True
             | Right(_) => Bool#False
    }

    global function isRight[L,R](op1:Either[L,R]):Bool{
         inspect op1 with
             | Left(_) => Bool#False
             | Right(_) => Bool#True
    }

    global function eq[L,R](op1:Either[L,R], op2:Either[L,R], implicit consume eqLeft:Equal.eq, implicit consume eqRight:Equal.eq):Bool {
         inspect op1 with
             | Left(l1) => (inspect op2 with
                    | Left(l2) => eqLeft(l1,l2)
                    | Right(_) => Bool#False
             )
             | Right(r1) => (inspect op2 with
                    | Left(_) => Bool#False
                    | Right(r2) => eqRight(r1,r2)
             )
    }

    instance EqForEither[L, R] for Equal[Either[L,R]] {
        implement eq with eq[L,R]
    }

}