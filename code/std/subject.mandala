import core.Id
import core.sys.Ids.moduleIdDerive
import core.sys.Ids.moduleIdFromPrivate
import core.sys.Ids.idToData
import core.sys.Ids.privateModuleIdDerive
import core.Bool.Bool
import core.Equal
import core.Equal._
import Capability._

//This manages the issuing & authentication of subjects
// Issuers can use this to generate Subjects and AuthenticationTokens of a shared type
// Consumers can use them while abstracting over the issuer (thus working independent of the authentication method)
//This ensures that each issuer has their own subjects and that subjects from different issuers do not collide
module Subject {
    global primitive data Subject(id:Id.Public)
    //Permission to authorize actions on behave of a subject is handed out after successful authentication
    local data Authorize
    type AuthorizationCap = Cap[Subject,Authorize]
    type Authorization = Perm[Subject,Authorize]

    //Like identity but creation must be approved by an identity issuer
    global(consume, inspect) local(create) data ValidatedSubject(subject:Subject)

    //Just a helper so that callers can evaluate what an expected id is, if they now the issuer and the id
    global function deriveSubjectId(issuer:Id.PublicModule, subject:Id.Public) = moduleIdDerive(issuer, idToData(subject))

    //Just a helper for modules to provide the private ids
    global function derivePrivateId(issuer:Id.PrivateModule, subject:Id.Public) = privateModuleIdDerive(issuer, idToData(subject))

    //Ensures that to ids only give the same subject if they are from the same issuer
    local function createSubject(issuer:Id.PublicModule, id:Id.Public) = Subject#(deriveSubjectId(issuer, id))

    //It is given that if you posses an Identity then the issuer has approved its creation (because of Auth)
    // Note: as the Identity can live long it may no longer be active if the issuer has mechanisms to remove ids
    global function validateSubject(issuer:Id.PrivateModule, subject:Id.Public):ValidatedSubject {
        ValidatedSubject#(createSubject(moduleIdFromPrivate(issuer), subject))
    }

    //The resulting AuthenticationToken is valid for the session(transaction bundle) because it is temporary
    // It is given that if you posses an AuthenticationToken then the issuer has approved its creation (because of Auth)
    global function authenticate(issuer:Id.PrivateModule, subject:Id.Public):AuthorizationCap {
        createCap(deriveSubjectId(moduleIdFromPrivate(issuer), subject))
    }

    global function checkAuthorization(subj:Subject, auth:Authorization):Bool = subj.id == auth.id

    //Implement Equality for the types where it makes sense
    global function subjectEq(s1:Subject, s2:Subject) = s1.id == s2.id
    instance EqualForSubject for Equal[Subject] {
        implement eq with subjectEq
    }

    global function validatedSubjectEq(s1:ValidatedSubject, s2:ValidatedSubject) = s1.subject == s2.subject
    instance EqualForValidatedSubject for Equal[ValidatedSubject] {
        implement eq with validatedSubjectEq
    }

}
