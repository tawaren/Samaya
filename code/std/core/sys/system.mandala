import IntU64.U64
import IntU8.U8
import IntI64.I64
import Data._
import Ids._

system(12) module Sys {
   //Note this is temporary to prevent nesting an Entry in a Entry
   // This is no problem, as the top marker indicates special treatment by runtime anyway
   // Meaning the runtime can still persist it
   // in fact the runtime does ignore the persisted capability all together and only looks for tops

   guarded[T] temporary data Entry[persisted T](id:PrivateId,val:T)

   global function entryId[persisted T](entry: Entry[T]):Id = idFromPrivate(entry.id)

   //Information about the current Transaction
   local temporary data Context(bundleHash:Data20, blockNo:U64, sectionNo:U8, txNo:U8)

   //A unique Id generator for the current Transaction
   local temporary affine data IdGenerator(txtId:PrivateId, ctr:U64)

   //The sender of a transaction (for runtimes supporting Native senders)
   global(consume,inspect) local(create) temporary standard data Sender(senderId:PrivateId)

   global function bundleHash(ctx:Context):(txtHash:Data20) = ctx.bundleHash
   global function blockNo(ctx:Context):(blockNo:U64) = ctx.blockNo
   global function sectionNo(ctx:Context):(sectionNo:U8) = ctx.sectionNo
   global function txNo(ctx:Context):(txNo:U8) = ctx.txNo
   global function txtId(gen:IdGenerator):Id = idFromPrivate(gen.txtId)

   //Todo: can we make non transactional:
   //      have & use unsave abort??
   global transactional function uniqueID(consume gen:IdGenerator):(id:PrivateId, genOut:IdGenerator) {
     let IdGenerator(txtId, ctr) = gen in (
       privateIdDerive(txtId, IntU64.hash(ctr)),
       IdGenerator#(txtId, IntU64.add(ctr,1))
     )
   }

   global transactional function subGenerator(consume gen:IdGenerator):(newGen:IdGenerator, genOut:IdGenerator) {
     let IdGenerator(txtId, ctr) = gen in (
       IdGenerator#(privateIdDerive(txtId, IntU64.hash(ctr)), 0),
       IdGenerator#(txtId, IntU64.add(ctr,1))
     )
   }
}