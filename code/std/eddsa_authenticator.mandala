import core.Id._
import core.Id
import core.sys.Ids.moduleId
import core.sys.EdDsa._
import core.sys.Sys.Context
import Subject._
import Option._
import PermAssociation._
import Permission._

//Note: this is not really a system module
//      but we need the hash on the local_server/wallet side to generate subjects
//      and this is the easiest way to make this module recognizable without manually coping hashes around
system(15) module EdDsaAuthenticator {

    global function subjectFor(pk:Pk):ValidatedSubject {
        validateSubject(moduleId(),derivePublicId(pk))
    }

    global transactional function authenticateWith(pk:Pk, sig:Sig, implicit ctx:Context):(sk:Id.Private ,auth:AuthorizationCap) {
         ensure verifyTx(ctx, pk, sig) in
         let internalSubject = derivePublicId(pk) in
         let privateId = derivePrivateId(moduleId(),internalSubject) in
         let auth = authenticate(moduleId(),internalSubject) in
         (privateId, auth)
    }
}

transactional transaction AuthorizationPermFromEdDsa(pk:Pk, sig:Sig, implicit context ctx:Context):Authorization = let (_, auth) = EdDsaAuthenticator.authenticateWith(pk,sig) in perm(auth)
transactional transaction AuthorizationCapFromEdDsa(pk:Pk, sig:Sig, implicit context ctx:Context):AuthorizationCap = let (_, auth) = EdDsaAuthenticator.authenticateWith(pk,sig) in auth
transactional transaction AuthorizationIdFromEdDsa(pk:Pk, sig:Sig, implicit context ctx:Context):Id.Private = let (id, _) = EdDsaAuthenticator.authenticateWith(pk,sig) in id
transactional transaction AuthorizationFromEdDsa(pk:Pk, sig:Sig, implicit context ctx:Context):(Id.Private,AuthorizationCap) = EdDsaAuthenticator.authenticateWith(pk,sig)
transactional transaction SubjectFromEdDsa(pk:Pk):Subject = EdDsaAuthenticator.subjectFor(pk).subject
