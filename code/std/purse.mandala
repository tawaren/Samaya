import core.sys.Sys._
import core.sys.Sys
import Capability._
import core.Id._
import core.Id
//Todo: copy needed stuff to core
import core.sys.Ids.idFromPrivate
import Fungible
import core.Arith._
import core.Compare._
import core.BitOps._
import core.IntU128._

module Purse {
    local linear data Purse[F](f:F)
    type PurseEntry[persisted F] = Entry[Purse[F]]

    //Permissions
    local data Master()
    local data Deposit()
    local data Withdraw()

    type MasterCap[F] = Cap[Purse[F],Master]
    type DepositCap[F] = Cap[Purse[F],Deposit]
    type WithdrawCap[F] = Cap[Purse[F],Withdraw]

    global function createDepositCap[F](cap:MasterCap[F]) = DepositCap[F]#(cap.id)
    global function createWithdrawCap[F](cap:MasterCap[F]) = WithdrawCap[F]#(cap.id)

    global function createDepositPerm[PF](cap:Cap[PF,Master]):Perm[PF,Deposit] = createPerm(cap)
    global function createWithdrawPerm[PF](cap:Cap[PF,Master]):Perm[PF,Withdraw] = createPerm(cap)

    instance DepositPermSelect for PermAssociation[Deposit,Master] {
        implement perm[PF] with createDepositPerm[PF]
    }

    instance WithdrawPermSelect for PermAssociation[Withdraw,Master] {
        implement perm[PF] with createWithdrawPerm[PF]
    }

    global transactional function createPurse[persisted F](consume f:F, implicit context consume gen:IdGenerator):(PurseEntry[F],MasterCap[F],IdGenerator){
        let (id, newGen) = uniqueID(gen) in
        (Entry#(id, Purse#(f)), MasterCap[F]#(idFromPrivate(id)),newGen)
    }

    global function dispose[persisted F](consume purse:Handle[Purse[F],Master]):F {
      let (entry,_) = extractHandle(purse) in entry.val.f
    }

    global transactional function deposit[persisted F](consume purse:Handle[Purse[F],Deposit], consume f:F, implicit context consume merge:Fungible[F].merge):Handle[Purse[F],Deposit] {
        let (PurseEntry(id, p),perm) = extractHandle(purse) in createHandle(Entry#(id,Purse#(merge(p.f,f))),perm)
    }

    global transactional function withdraw[persisted F](consume purse:Handle[Purse[F],Withdraw], amount:U128, implicit context consume split:Fungible[F].split):(Handle[Purse[F],Withdraw],F) {
        let (PurseEntry(id, p),perm) = extractHandle(purse) in
        let (rem, ext) = split(p.f, amount) in
        (createHandle(Entry#(id,Purse#(rem)),perm), ext)
    }
}

//Todo: Needs Annotated capabilities & Perms & Handles to be fully dynamic
//      Thus we have a less dynamic version
module Allowance {

    local global(create) affine data Allowance[F](cap:Cap[Purse.Purse[F],Purse.Withdraw], amount:U128)

    global function amount[F](allowance:Allowance[F]):U128 = allowance.amount

    global transactional function withdraw[persisted F](consume entry:Purse.PurseEntry[F], amount:U128, consume allowance:Allowance[F], implicit context consume split:Fungible[F].split):(Purse.PurseEntry[F],Allowance[F],F) {
        let Allowance(withdrawCap, remAmount) = allowance in
        ensure remAmount <= amount in
        let handle = createHandle(entry, toPerm(withdrawCap)) in
        let (Handle(newPurse), ext) = Purse.withdraw(handle, amount) in
        let newAllowance = Allowance#(withdrawCap, remAmount - amount) in
        (newPurse, newAllowance ,ext)
    }
}
