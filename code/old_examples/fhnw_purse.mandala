import std.Token._
import std.Purse._
import std.Publish.share
import std.Publish.get
import std.Publish.Public
import std.Subject._
import std.SubjectLock._
import std.Capability._
import std.core.sys.Sys._
import std.core.IntU128.U128

transactional transaction CreateFHNWPurse(owner:Subject, context consume gen:IdGenerator):(
        purse:PurseEntry[Token[FHNWToken.FHNW]],
        master:Entry[Locked[WithdrawCap[Token[FHNWToken.FHNW]]]],
        deposit:Public[DepositCap[Token[FHNWToken.FHNW]]]
    ) {
  let (purse, cap, gen) = createPurse(zero(),gen) in
  let (withdrawCapLoc, gen) = uniqueID(gen) in
  let (depositCapLoc, _) = uniqueID(gen) in
  let lockedWithdraw = lockEntry(owner,withdrawCapLoc, createWithdrawCap(cap)) in
  let sharedDeposit = share(depositCapLoc, createDepositCap(cap)) in
  (purse, lockedWithdraw, sharedDeposit)
}

transactional transaction LoadFHNWPurse(
        consume coins:Entry[Locked[Token[FHNWToken.FHNW]]],
        auth:Authorization,
        consume to:PurseEntry[Token[FHNWToken.FHNW]],
        depositCap:Public[DepositCap[Token[FHNWToken.FHNW]]]
    ): (to:PurseEntry[Token[FHNWToken.FHNW]]) {
  let (_, _, allTokens) = unlockEntry(coins, auth) in
  let depositCap = get(depositCap) in
  let toHandle = createHandle(to, toPerm(depositCap)) in
  deposit(toHandle, allTokens).entry
}

transactional transaction FHNWPurseTransfer(
        consume from:PurseEntry[Token[FHNWToken.FHNW]],
        withdrawCap:Entry[Locked[WithdrawCap[Token[FHNWToken.FHNW]]]],
        auth:Authorization,
        amount:U128,
        consume to:PurseEntry[Token[FHNWToken.FHNW]],
        depositCap:Public[DepositCap[Token[FHNWToken.FHNW]]]
    ):(from:PurseEntry[Token[FHNWToken.FHNW]], to:PurseEntry[Token[FHNWToken.FHNW]]) {
  let (_, _, withdrawCap) = unlockEntry(withdrawCap, auth) in
  let depositCap = get(depositCap) in
  let fromHandle = createHandle(from, toPerm(withdrawCap)) in
  let toHandle = createHandle(to, toPerm(depositCap)) in
  let (fromHandle, tokens) = withdraw(fromHandle, amount) in
  let toHandle = deposit(toHandle, tokens) in
  (fromHandle.entry, toHandle.entry)
}
